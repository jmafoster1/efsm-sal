inference_answer {N_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  coin,
  select,
  vend
END;

STRING : TYPE = {String_dummy_};
                                                                 %%10
STATES : TYPE = {State_0, State_1, State_4, NULL_STATE};

value : CONTEXT = value {N_, STRING};
arithmetic : CONTEXT = arithmetic{N_, STRING};

TRILEAN : TYPE = arithmetic ! TRILEAN;
B_VALUE : TYPE =  value ! B_VALUE;
VALUE : TYPE =  value ! VALUE;
value_option : CONTEXT = option {VALUE};
                                                                 %%20
VALUE_OPTION : TYPE =  value_option ! OPTION;

Some : [VALUE -> VALUE_OPTION] = value_option ! Some;
NUM : [value ! int -> VALUE] = value ! NUM;
STR : [STRING -> VALUE] = value ! STR;

value_plus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    arithmetic ! value_plus;
value_minus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    arithmetic ! value_minus;                                      %%30
  
value_le : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_le;
value_ge : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_ge;
value_lt : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_lt;
value_gt : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_gt;
value_eq : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =           %%40
    arithmetic ! value_eq;
  
output_sequence : CONTEXT = sequence {value_option !
    B_OPTION, value_option ! OPTION_BB, 1};
input_sequence : CONTEXT = sequence {B_VALUE, value !
    VALUE_BB, 1};
gval : [TRILEAN -> BOOLEAN] = LAMBDA(g : TRILEAN) : g =
    arithmetic ! True;
  
check_underflow : [VALUE_OPTION -> BOOLEAN] =                    %%50
    LAMBDA(v : VALUE_OPTION) : gval(value_ge(v, Some(NUM(0-N_))));
check_overflow : [VALUE_OPTION -> BOOLEAN] =
    LAMBDA(v : VALUE_OPTION) : gval(value_le(v, Some(NUM(N_))));
  
drinks : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATES
    LOCAL r_1 : VALUE_OPTION
    LOCAL r_2 : VALUE_OPTION                                     %%60
    INPUT I : input_sequence ! Sequence
    OUTPUT O : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State_0 AND
        I = input_sequence ! empty AND
        O = output_sequence ! empty AND
        r_1 = value_option ! None AND
        r_2 = value_option ! None
      -->
    ]                                                            %%70
    TRANSITION [
      %% select
      SELECT :
          cfstate = State_0 AND label = select AND
              input_sequence ! size?(I) = 1
        -->
          cfstate' = State_1;
          r_2' = Some(NUM(0));
          r_1' = Some(I(1));
          O' = output_sequence ! empty                           %%80
      []
      %% coin
      COIN :
          cfstate = State_1 AND label = coin AND
              input_sequence ! size?(I) = 1 AND
              check_overflow(value_plus(r_2, Some(I(1)))) AND
              check_underflow(value_plus(r_2, Some(I(1))))
        -->
          cfstate' = State_1;
          r_2' = value_plus(r_2, Some(I(1)));                    %%90
          O' = output_sequence !
              insert(value_plus(r_2, Some(I(1))),
              output_sequence ! empty);
          r_1' = r_1
      []
      %% vend
      VEND :
          cfstate = State_1 AND label = vend AND
              input_sequence ! size?(I) = 0
        -->                                                      %%100
          cfstate' = State_4;
          O' = output_sequence ! insert(r_1, output_sequence !
              empty);
          r_1' = r_1;
          r_2' = r_2
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE;                                 %%110
          r_1' = r_1;
          r_2' = r_2
    ]
  END;
END
