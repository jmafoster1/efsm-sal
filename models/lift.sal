lift {N_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  close,
  goDown,
  goUp,
  open
END;

STATES : TYPE = {State_0, State_1, State_2, State_3, NULL_STATE};%%10

NAT : TYPE = [0..N_];

Value:CONTEXT = value {N_, STRING};
Arithmetic:CONTEXT = arithmetic{N_, STRING};

B_VALUE : TYPE =  Value ! B_VALUE;
VALUE : TYPE =  {g : B_VALUE | g /= value {N_, STRING} ! VALUE_BB};
ValueOption:CONTEXT = option {VALUE};


B_VALUE_OPTION : TYPE = ValueOption ! B_OPTION;
VALUE_OPTION : TYPE =  {g : B_VALUE_OPTION | g /= ValueOption ! OPTION_BB};
BOOL_OPTION : TYPE = option {bool} ! OPTION;

Some : [VALUE -> VALUE_OPTION] = ValueOption ! Some;
NUM: [Value!NAT -> VALUE] = Value ! NUM;
STR: [STRING -> VALUE] = Value ! STR;

value_plus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] = Arithmetic ! value_plus;
value_minus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] = Arithmetic ! value_minus;

value_le : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] = Arithmetic ! value_le;
value_ge : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] = Arithmetic ! value_ge;
value_lt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] = Arithmetic ! value_lt;
value_gt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] = Arithmetic ! value_gt;

OutputSequence : CONTEXT = sequence {B_VALUE_OPTION; ValueOption ! OPTION_BB, 1};
InputSequence : CONTEXT = sequence {B_VALUE; value {N_, STRING} ! VALUE_BB, 1};

gval : [BOOL_OPTION -> bool] =
LAMBDA(g:BOOL_OPTION): g = option {bool} !Some(TRUE);

lift : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATES
    INPUT I : InputSequence ! Sequence
    OUTPUT O : OutputSequence ! Sequence
    INITIALIZATION [
        cfstate = State_0
      -->
    ]
    TRANSITION [
      %% goUp
      T1UP :                                                     %%30
          cfstate = State_0 AND
          label = goUp AND
          InputSequence ! size?(I) = 1 AND
          gval(value_gt(Some(I(1)), Some(NUM(0))))
        -->
          cfstate' = State_1;
          O' = OutputSequence!insert(Some(I(1)), OutputSequence!empty)
      []
      %% goUp
      T2UP :
          cfstate = State_1 AND
          label = goUp AND
          InputSequence ! size?(I) = 1 AND
          gval(value_gt(Some(I(1)), Some(NUM(0))))
        -->
          cfstate' = State_1;                                    %%40
          O' = OutputSequence!insert(value_plus(Some(I(1)), Some(NUM(-1))), OutputSequence!empty)
      []
      %% goUp
      T3UP :
          cfstate = State_1 AND
          label = goUp AND
          InputSequence ! size?(I) = 1 AND
          I(1) = NUM(0)
        -->
          cfstate' = State_0;
          O' = OutputSequence!insert(Some(NUM(0)), OutputSequence!empty)
      []
      %% goDown                                                  %%50
      T1DOWN :
          cfstate = State_0 AND
          label = goDown AND
          InputSequence ! size?(I) = 1 AND
          gval(value_gt(Some(I(1)), Some(NUM(0))))
        -->
          cfstate' = State_2;
          O' = OutputSequence!insert(Some(I(1)), OutputSequence!empty)
      []
      %% goDown
      T2DOWN :
          cfstate = State_2 AND
          label = goDown AND               %%60
          InputSequence ! size?(I) = 1 AND
          gval(value_gt(Some(I(1)), Some(NUM(0))))
        -->
          cfstate' = State_2;
          O' = OutputSequence!insert(value_plus(Some(I(1)), Some(NUM(-1))), OutputSequence!empty)
      []
      %% goDown
      T3DOWN :
          cfstate = State_2 AND
          label = goDown AND
          InputSequence ! size?(I) = 1 AND
          I(1) = NUM(0)
        -->                                                      %%70
          cfstate' = State_0;
          O' = OutputSequence!insert(Some(NUM(0)), OutputSequence!empty)
      []
      %% open
      OPENDOORS :
          cfstate = State_0 AND
          label = open AND
          InputSequence ! size?(I) = 0
        -->
          cfstate' = State_3;
          O' = OutputSequence!insert(Some(NUM(1)), OutputSequence!empty)
      []                                                         %%80
      %% close
      CLOSEDOORS :
          cfstate = State_3 AND
          label = close AND
          InputSequence ! size?(I) = 0
        -->
          cfstate' = State_0;
          O' = OutputSequence!insert(Some(NUM(0)), OutputSequence!empty)
      []
      SINK_HOLE :
          ELSE
        -->                                                      %%90
          cfstate' = NULL_STATE
    ]
  END;
END
