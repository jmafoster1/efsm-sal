%The biggest absolute integer value used is 0
drinks_machine_payforward {n_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  coin,
  select,
  setup,
  vend
END;
                                                                 %%10
STRING : TYPE = {String__dummy__, NO__100};

STATE : TYPE = {State__0, State__1, State__2, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n_, STRING};

output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};    %%20
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};

drinks : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    LOCAL r__2 : OPTION
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence                        %%30
    INITIALIZATION [
        cfstate = State__0 AND
        o = output_sequence ! empty AND
        r__1 = None AND
        r__2 = None
      -->
    ]
    TRANSITION [
      COIN :
          cfstate = State__2 AND label = coin AND                %%40
              input_sequence ! size?(i) = 1 AND
              check_overflow(value_plus(r__2, Some(i(1)))) AND
              check_underflow(value_plus(r__2, Some(i(1))))
        -->
          cfstate' = State__2;
          r__1' = r__1;
          r__2' = value_plus(r__2, Some(i(1)));
          o' = output_sequence !
              insert(value_plus(r__2, Some(i(1))),
              output_sequence ! empty)                             %%50
      []
      SETUP :
          cfstate = State__0 AND label = setup AND
              input_sequence ! size?(i) = 0
        -->
          cfstate' = State__1;
          r__2' = Some(Num(0));
          o' = output_sequence ! empty
      []
      SELECT :                                                   %%60
          cfstate = State__1 AND label = select AND
              input_sequence ! size?(i) = 1
        -->
          cfstate' = State__2;
          r__1' = Some(i(0));
          r__2' = r__2;
          o' = output_sequence ! empty
      []
      VEND :
          cfstate = State__2 AND label = vend AND                %%70
              input_sequence ! size?(i) = 0 AND
              gval(value_ge(r__2, Some(Str(NO__100)))) AND
              check_overflow(value_minus(r__2,
              Some(Str(NO__100)))) AND
              check_underflow(value_minus(r__2,
              Some(Str(NO__100))))
        -->
          cfstate' = State__1;
          r__1' = r__1;
          r__2' = value_minus(r__2, Some(Str(NO__100)));         %%80
          o' = output_sequence ! insert(r__1, output_sequence !
              empty)
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE
    ]
  END;
END                                                              %%90
