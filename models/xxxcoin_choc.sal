%The biggest absolute integer value used is 1
xxxcoin_choc {n_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  coin,
  init,
  vend
END;

STRING : TYPE = {String__dummy__};                               %%10

STATE : TYPE =
    {State__0, State__1, State__2, State__3, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n_, STRING};

output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};    %%20
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};

graph1 : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [                                             %%30
        cfstate = State__0 AND
        o = output_sequence ! empty AND
        r__1 = None
      -->
    ]
    TRANSITION [
      INIT :
          cfstate = State__0 AND label = init AND
              input_sequence ! size?(i) = 0
        -->                                                      %%40
          cfstate' = State__1;
          r__1' = Some(Num(0));
          o' = output_sequence ! empty
      []
      COIN :
          cfstate = State__1 AND label = coin AND
              input_sequence ! size?(i) = 0 AND
              check_overflow(value_plus(r__1, Some(Num(1)))) AND
              check_underflow(value_plus(r__1, Some(Num(1))))
        -->                                                      %%50
          cfstate' = State__1;
          r__1' = value_plus(r__1, Some(Num(1)));
          o' = output_sequence ! empty
      []
      VEND :
          cfstate = State__1 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_gt(r__1, Some(Num(0)))) AND
              check_overflow(value_minus(r__1, Some(Num(1)))) AND
              check_underflow(value_minus(r__1, Some(Num(1))))     %%60
        -->
          cfstate' = State__2;
          r__1' = value_minus(r__1, Some(Num(1)));
          o' = output_sequence ! empty
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE
    ]                                                            %%70
  END;
graph2 : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State__0 AND                                   %%80
        o = output_sequence ! empty AND
        r__1 = None
      -->
    ]
    TRANSITION [
      INIT1 :
          cfstate = State__0 AND label = init AND
              input_sequence ! size?(i) = 0
        -->
          cfstate' = State__1;                                   %%90
          r__1' = Some(Num(0));
          o' = output_sequence ! empty
      []
      COIN1 :
          cfstate = State__1 AND label = coin AND
              input_sequence ! size?(i) = 0 AND
              check_overflow(value_plus(r__1, Some(Num(1)))) AND
              check_underflow(value_plus(r__1, Some(Num(1))))
        -->
          cfstate' = State__2;                                   %%100
          r__1' = value_plus(r__1, Some(Num(1)));
          o' = output_sequence ! empty
      []
      COIN2 :
          cfstate = State__2 AND label = coin AND
              input_sequence ! size?(i) = 0 AND
              check_overflow(value_plus(r__1, Some(Num(1)))) AND
              check_underflow(value_plus(r__1, Some(Num(1))))
        -->
          cfstate' = State__2;                                   %%110
          r__1' = value_plus(r__1, Some(Num(1)));
          o' = output_sequence ! empty
      []
      VEND1 :
          cfstate = State__2 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_gt(r__1, Some(Num(0)))) AND
              check_overflow(value_minus(r__1, Some(Num(1)))) AND
              check_underflow(value_minus(r__1, Some(Num(1))))
        -->                                                      %%120
          cfstate' = State__3;
          r__1' = value_minus(r__1, Some(Num(1)));
          o' = output_sequence ! empty
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE
    ]
  END;
  refines: THEOREM graph2 IMPLEMENTS graph1;
END
