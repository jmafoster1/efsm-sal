michaels {N_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  test
END;

STRING : TYPE = {String_hello};

STATES : TYPE = {State_0, State_1, State_2, NULL_STATE};
                                                                 %%10
Value:CONTEXT = value {N_, STRING};
Arithmetic:CONTEXT = arithmetic{N_, STRING};

B_VALUE : TYPE =  Value ! B_VALUE;
VALUE : TYPE =  {g : B_VALUE | g /= value {N_, STRING} !
    VALUE_BB};
ValueOption:CONTEXT = option {VALUE};

B_VALUE_OPTION : TYPE = ValueOption ! B_OPTION;
VALUE_OPTION : TYPE =  {g : B_VALUE_OPTION | g /= ValueOption !  %%20
    OPTION_BB};
BOOL_OPTION : TYPE = option {bool} ! OPTION;

Some : [VALUE -> VALUE_OPTION] = ValueOption ! Some;
NUM: [Value!NAT -> VALUE] = Value ! NUM;
STR: [STRING -> VALUE] = Value ! STR;

value_plus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    Arithmetic ! value_plus;
value_minus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =   %%30
    Arithmetic ! value_minus;

value_le : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_le;
value_ge : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_ge;
value_lt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_lt;
value_gt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_gt;                                         %%40
value_eq : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_eq;

OutputSequence : CONTEXT =
    sequence {B_VALUE_OPTION; ValueOption ! OPTION_BB, 1};
InputSequence : CONTEXT =
    sequence {B_VALUE; value {N_, STRING} ! VALUE_BB, 1};

gval : [BOOL_OPTION -> bool] =
LAMBDA(g:BOOL_OPTION): g = option {bool} !Some(TRUE);            %%50

MichaelsEFSM : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATES
    LOCAL r_1 : VALUE_OPTION
    LOCAL r_2 : VALUE_OPTION
    LOCAL r_3 : VALUE_OPTION
    INPUT I : InputSequence ! Sequence
    OUTPUT O : OutputSequence ! Sequence                         %%60
    INITIALIZATION [
        cfstate = State_0 AND
        O = OutputSequence ! empty AND
        r_1 = ValueOption ! None AND
        r_2 = ValueOption ! None AND
        r_3 = ValueOption ! None
      -->
    ]
    TRANSITION [
      %% test                                                    %%70
      ALL_SYNTAX :
          cfstate = State_1 AND label = test AND
              InputSequence ! size?(I) = 4 AND
              gval(value_eq(value_plus(r_1, Some(I(1))), Some(NUM(7)))) AND
              gval(value_gt(Some(NUM(3)), value_minus(Some(I(4)), r_3)))
              AND gval(value_ge(r_2, Some(NUM(0)))) AND
              gval(value_ge(r_2, Some(NUM(0)))) AND
              gval(value_eq(r_3, ValueOption ! None)) AND
              gval(value_le(value_plus(Some(NUM(5)), r_2),
              Some(NUM(N_))))                                      %%80
        -->
          cfstate' = State_2;
          r_1' = value_plus(Some(NUM(5)), r_2);
          r_2' = Some(STR(String_hello));
          O' = OutputSequence !
              insert(Some(NUM(5)), OutputSequence !
              insert(Some(STR(String_hello)), OutputSequence !
              insert(r_2, OutputSequence !
              insert(Some(I(2)), OutputSequence !
              insert(value_plus(Some(NUM(5)), r_2), OutputSequence %%90
              ! insert(value_minus(value_plus(Some(NUM(5)), r_2),
              Some(NUM(5))), OutputSequence ! empty))))));
          r_3' = r_3
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE;
          r_1' = r_1;
          r_2' = r_2;                                            %%100
          r_3' = r_3
    ]
  END;
END
