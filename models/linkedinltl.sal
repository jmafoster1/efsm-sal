linkedinltl {N_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  login,
  pdf,
  view
END;

STRING : TYPE =
    {String_4Zof, String_HM8p, String_MNn5, String_OUT_OF_NETWORK, %%10
    String_detailedPDF, String_free, String_friendID, String_name,
    String_otherID, String_pdfDetailed, String_summaryPDF};

STATES : TYPE =
    {State_0, State_1, State_2, State_3, State_4, State_5,
    NULL_STATE};

Value:CONTEXT = value {N_, STRING};
Arithmetic:CONTEXT = arithmetic{N_, STRING};
                                                                 %%20
B_VALUE : TYPE =  Value ! B_VALUE;
VALUE : TYPE =  {g : B_VALUE | g /= value {N_, STRING} !
    VALUE_BB};
ValueOption:CONTEXT = option {VALUE};

B_VALUE_OPTION : TYPE = ValueOption ! B_OPTION;
VALUE_OPTION : TYPE =  {g : B_VALUE_OPTION | g /= ValueOption !
    OPTION_BB};
BOOL_OPTION : TYPE = option {bool} ! OPTION;
                                                                 %%30
Some : [VALUE -> VALUE_OPTION] = ValueOption ! Some;
NUM: [Value!NAT -> VALUE] = Value ! NUM;
STR: [STRING -> VALUE] = Value ! STR;

value_plus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    Arithmetic ! value_plus;
value_minus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    Arithmetic ! value_minus;

value_le : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =       %%40
    Arithmetic ! value_le;
value_ge : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_ge;
value_lt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_lt;
value_gt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_gt;
value_eq : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_eq;
                                                                 %%50
OutputSequence : CONTEXT =
    sequence {B_VALUE_OPTION; ValueOption ! OPTION_BB, 1};
InputSequence : CONTEXT =
    sequence {B_VALUE; value {N_, STRING} ! VALUE_BB, 1};

gval : [BOOL_OPTION -> bool] =
LAMBDA(g:BOOL_OPTION): g = option {bool} !Some(TRUE);

linkedIn : MODULE =
  BEGIN                                                          %%60
    INPUT label : LABEL
    LOCAL cfstate : STATES
    INPUT I : InputSequence ! Sequence
    OUTPUT O : OutputSequence ! Sequence
    INITIALIZATION [
        cfstate = State_0 AND
        O = OutputSequence ! empty
      -->
    ]
    TRANSITION [                                                 %%70
      %% login
      LOGIN :
          cfstate = State_0 AND label = login AND
              InputSequence ! size?(I) = 1 AND
              gval(value_eq(Some(I(1)), Some(STR(String_free))))
        -->
          cfstate' = State_1;
          O' = OutputSequence ! empty
      []
      %% view                                                    %%80
      VIEWFRIEND :
          cfstate = State_1 AND label = view AND
              InputSequence ! size?(I) = 3 AND
              gval(value_eq(Some(I(1)),
              Some(STR(String_friendID)))) AND
              gval(value_eq(Some(I(2)),
              Some(STR(String_name)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_HM8p))))
        -->
          cfstate' = State_2;                                    %%90
          O' = OutputSequence !
              insert(Some(STR(String_friendID)), OutputSequence !
              insert(Some(STR(String_name)), OutputSequence !
              insert(Some(STR(String_HM8p)), OutputSequence !
              empty)))
      []
      %% view
      VIEWOTHER :
          cfstate = State_1 AND label = view AND
              InputSequence ! size?(I) = 3 AND                     %%100
              gval(value_eq(Some(I(1)),
              Some(STR(String_otherID)))) AND
              gval(value_eq(Some(I(2)),
              Some(STR(String_name)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_4Zof))))
        -->
          cfstate' = State_2;
          O' = OutputSequence !
              insert(Some(STR(String_otherID)), OutputSequence !
              insert(Some(STR(String_name)), OutputSequence !      %%110
              insert(Some(STR(String_4Zof)), OutputSequence !
              empty)))
      []
      %% view
      VIEWOTHEROON :
          cfstate = State_1 AND label = view AND
              InputSequence ! size?(I) = 3 AND
              gval(value_eq(Some(I(1)),
              Some(STR(String_otherID)))) AND
              gval(value_eq(Some(I(2)),                            %%120
              Some(STR(String_OUT_OF_NETWORK)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_MNn5))))
        -->
          cfstate' = State_3;
          O' = OutputSequence !
              insert(Some(STR(String_otherID)), OutputSequence !
              insert(Some(STR(String_OUT_OF_NETWORK)),
              OutputSequence !
              insert(Some(STR(String_MNn5)), OutputSequence !
              empty)))                                             %%130
      []
      %% view
      VIEWOTHERFUZZ :
          cfstate = State_1 AND label = view AND
              InputSequence ! size?(I) = 3 AND
              gval(value_eq(Some(I(1)),
              Some(STR(String_otherID)))) AND
              gval(value_eq(Some(I(2)),
              Some(STR(String_name)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_MNn5))))   %%140
        -->
          cfstate' = State_3;
          O' = OutputSequence !
              insert(Some(STR(String_otherID)), OutputSequence !
              insert(Some(STR(String_name)), OutputSequence !
              insert(Some(STR(String_MNn5)), OutputSequence !
              empty)))
      []
      %% pdf
      PDFFRIEND :                                                %%150
          cfstate = State_2 AND label = pdf AND
              InputSequence ! size?(I) = 3 AND
              gval(value_eq(Some(I(1)),
              Some(STR(String_friendID)))) AND
              gval(value_eq(Some(I(2)),
              Some(STR(String_name)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_HM8p))))
        -->
          cfstate' = State_4;
          O' = OutputSequence !                                  %%160
              insert(Some(STR(String_detailedPDF)),
              OutputSequence ! empty)
      []
      %% pdf
      PDFOTHER_A :
          cfstate = State_3 AND label = pdf AND
              InputSequence ! size?(I) = 3 AND
              gval(value_eq(Some(I(1)),
              Some(STR(String_otherID)))) AND
              gval(value_eq(Some(I(2)),                            %%170
              Some(STR(String_name)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_4Zof))))
        -->
          cfstate' = State_4;
          O' = OutputSequence !
              insert(Some(STR(String_detailedPDF)),
              OutputSequence ! empty)
      []
      %% pdf
      PDFOTHER_B :                                               %%180
          cfstate = State_2 AND label = pdf AND
              InputSequence ! size?(I) = 3 AND
              gval(value_eq(Some(I(1)),
              Some(STR(String_otherID)))) AND
              gval(value_eq(Some(I(2)),
              Some(STR(String_name)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_4Zof))))
        -->
          cfstate' = State_4;
          O' = OutputSequence !                                  %%190
              insert(Some(STR(String_detailedPDF)),
              OutputSequence ! empty)
      []
      %% pdf
      PDFOTHEROON :
          cfstate = State_3 AND label = pdf AND
              InputSequence ! size?(I) = 3 AND
              gval(value_eq(Some(I(1)),
              Some(STR(String_otherID)))) AND
              gval(value_eq(Some(I(2)),                            %%200
              Some(STR(String_OUT_OF_NETWORK)))) AND
              gval(value_eq(Some(I(3)), Some(STR(String_MNn5))))
        -->
          cfstate' = State_5;
          O' = OutputSequence !
              insert(Some(STR(String_summaryPDF)),
              OutputSequence ! empty)
      []
      SINK_HOLE :
          ELSE                                                   %%210
        -->
          cfstate' = NULL_STATE
    ]
  END;

  neverDetailedHand: THEOREM linkedIn |-
    G(label = login AND
        gval(value_eq(Some(I(1)), Some(STR(String_free)))) =>
        X(G(label = pdf AND
        gval(value_eq(Some(I(1)), Some(STR(String_otherID)))) =>
        X(NOT(gval(value_eq(O(1),
        Some(STR(String_pdfDetailed)))))))));

  neverDetailed : THEOREM linkedIn |-
    G(label = login AND
        gval(value_eq(Some(I(1)),Some(STR(String_free)))) =>
        X(G(label = pdf AND
        gval(value_eq(Some(I(1)),Some(STR(String_otherID)))) =>
        X(NOT(gval(value_eq(O(1),                            %%220
        Some(STR(String_pdfDetailed)))))))));

  labelNotAlwaysLogin : THEOREM linkedIn |-
    NOT(G(label = login));

  testStateEqSome : THEOREM linkedIn |-
    U(cfstate = State_0, cfstate = State_1);

  testStateEqNone : THEOREM linkedIn |-
    F(cfstate = NULL_STATE);                                     %%230

  testInputEq : THEOREM linkedIn |-
    cfstate = State_0 AND label = login AND
        I = InputSequence !
        insert(STR(String_free), InputSequence ! empty) =>
        X(cfstate = State_1);

  testOutputEq : THEOREM linkedIn |-
    G(cfstate = State_3 AND
        I = InputSequence !                                        %%240
        insert(STR(String_otherID), InputSequence !
        insert(STR(String_OUT_OF_NETWORK), InputSequence !
        insert(STR(String_MNn5), InputSequence ! empty))) =>
        O = OutputSequence !
        insert(Some(STR(String_summaryPDF)), OutputSequence !
        empty));

END
