in_efsm_example {n_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  first,
  __false, % Handy example of reserved words appearing in labels
  eq_equiv
END;

STRING : TYPE = {String__dummy__};
                                                                                                                                  %%10
STATE : TYPE = {State__0, State__1, State__2, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n_, STRING};

output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};
                                                                                                                                  %%20
drinks : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State__0 AND
        o = output_sequence ! empty AND                                                                                           %%30
        r__1 = None
      -->
    ]
    TRANSITION [
      FIRST :
          cfstate = State__0 AND
          label = first AND
          input_sequence ! size?(i) = 1 AND
          % Begin In translation
          % The bracketing here is essential to keep the appropriate precedence
          (gval(value_eq(Some(i(1)), Some(Num(5)))) OR
           gval(value_eq(Some(i(1)), Some(Num(7)))) OR
           gval(value_eq(Some(i(1)), Some(Num(9)))))
          %End In translation
        -->
          cfstate' = State__1;
          r__1' = Some(i(1));
          o' = output_sequence ! empty                                                                                            %%40
      []
      % Clearly this transition can never be taken with a guard which simplifies
      % to FALSE but it's here for completeness
      FALSE :
          cfstate = State__1 AND
          label = __false AND
          input_sequence ! size?(i) = 1 AND
          FALSE % This one translates to FALSE because it's obviously impossible for i_1 to be in the empty list
        -->
          cfstate' = State__2;
          r__1' = r__1;
          o' = output_sequence ! empty
      []
      EQ_EQUIV :                                                                                                                      %%50
          cfstate = State__1 AND
          label = eq_equiv AND
          input_sequence ! size?(i) = 1 AND
          gval(value_eq(r__1, Some(Num(5))))
        -->
          cfstate' = State__2;
          o' = output_sequence ! empty;
          r__1' = r__1
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE;                                                                                                  %%60
          r__1' = r__1
    ]
  END;
END
