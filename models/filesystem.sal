filesystem {n_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  login,
  logout,
  read,
  write
END;

STRING : TYPE = {String_accessDenied};                           %%10
STATES : TYPE = {State_0, State_1, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n_, STRING};

output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};

filesystem : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATES
    LOCAL r_1 : OPTION                                     %%60
    LOCAL r_2 : OPTION
    LOCAL r_3 : OPTION
    INPUT I : input_sequence ! Sequence
    OUTPUT O : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State_0 AND
        I = input_sequence ! empty AND
        O = output_sequence ! empty AND
        r_1 = None AND
        r_2 = None AND                            %%70
        r_3 = None
      -->
    ]
    TRANSITION [
      %% login
      LOGIN :
          cfstate = State_0 AND label = login AND
              input_sequence ! size?(I) = 1
        -->
          cfstate' = State_1;                                    %%80
          r_1' = Some(I(1));
          O' = output_sequence ! empty;
          r_2' = r_2;
          r_3' = r_3
      []
      %% logout
      LOGOUT :
          cfstate = State_1 AND label = logout AND
              input_sequence ! size?(I) = 0
        -->                                                      %%90
          cfstate' = State_0;
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3;
          O' = output_sequence ! empty
      []
      %% write
      WRITE :
          cfstate = State_1 AND label = write AND
              input_sequence ! size?(I) = 1                        %%100
        -->
          cfstate' = State_1;
          r_1' = r_1;
          r_2' = Some(I(1));
          r_3' = r_1;
          O' = output_sequence ! empty
      []
      %% write
      WRITE_FAIL :
          cfstate = State_1 AND label = write AND                %%110
              input_sequence ! size?(I) = 1 AND r_3 /= r_1
        -->
          cfstate' = State_1;
          O' = output_sequence !
              insert(Some(Str(String_accessDenied)),
              output_sequence ! empty);
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3
      []                                                         %%120
      %% read
      READ_SUCCESS :
          cfstate = State_1 AND label = read AND
              input_sequence ! size?(I) = 0 AND r_1 = r_3 AND
              r_2 /= None
        -->
          cfstate' = State_1;
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3;                                            %%130
          O' = output_sequence ! insert(r_2, output_sequence !
              empty)
      []
      %% read
      READ_FAIL :
          cfstate = State_1 AND label = read AND
              input_sequence ! size?(I) = 0 AND
              (r_1 /= r_3 OR r_2 = None)
        -->
          cfstate' = State_1;                                    %%140
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3;
          O' = output_sequence !
              insert(Some(Str(String_accessDenied)),
              output_sequence ! empty)
      []
      SINK_HOLE :
          ELSE
        -->                                                      %%150
          cfstate' = NULL_STATE;
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3
    ]
  END;
END
