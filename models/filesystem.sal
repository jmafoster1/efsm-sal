filesystem {N_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  login,
  logout,
  read,
  write
END;

STRING : TYPE = {String_accessDenied};                           %%10

STATES : TYPE = {State_0, State_1, NULL_STATE};

value : CONTEXT = value {N_, STRING};
arithmetic : CONTEXT = arithmetic{N_, STRING};

TRILEAN : TYPE = arithmetic ! TRILEAN;
B_VALUE : TYPE =  value ! B_VALUE;
VALUE : TYPE =  value ! VALUE;
value_option : CONTEXT = option {VALUE};                         %%20

VALUE_OPTION : TYPE =  value_option ! OPTION;

Some : [VALUE -> VALUE_OPTION] = value_option ! Some;
NUM : [value ! int -> VALUE] = value ! NUM;
STR : [STRING -> VALUE] = value ! STR;

value_plus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    arithmetic ! value_plus;
value_minus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =   %%30
    arithmetic ! value_minus;

value_le : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_le;
value_ge : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_ge;
value_lt : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_lt;
value_gt : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_gt;                                         %%40
value_eq : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_eq;

output_sequence : CONTEXT = sequence {value_option !
    B_OPTION, value_option ! OPTION_BB, 1};
input_sequence : CONTEXT = sequence {B_VALUE, value !
    VALUE_BB, 1};
gval : [TRILEAN -> BOOLEAN] = LAMBDA(g : TRILEAN) : g =
    arithmetic ! True;
                                                                 %%50
check_underflow : [VALUE_OPTION -> BOOLEAN] =
    LAMBDA(v : VALUE_OPTION) : gval(value_ge(v, Some(NUM(0-N_))));
check_overflow : [VALUE_OPTION -> BOOLEAN] =
    LAMBDA(v : VALUE_OPTION) : gval(value_le(v, Some(NUM(N_))));

filesystem : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATES
    LOCAL r_1 : VALUE_OPTION                                     %%60
    LOCAL r_2 : VALUE_OPTION
    LOCAL r_3 : VALUE_OPTION
    INPUT I : input_sequence ! Sequence
    OUTPUT O : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State_0 AND
        I = input_sequence ! empty AND
        O = output_sequence ! empty AND
        r_1 = value_option ! None AND
        r_2 = value_option ! None AND                             %%70
        r_3 = value_option ! None
      -->
    ]
    TRANSITION [
      %% login
      LOGIN :
          cfstate = State_0 AND label = login AND
              input_sequence ! size?(I) = 1
        -->
          cfstate' = State_1;                                    %%80
          r_1' = Some(I(1));
          O' = output_sequence ! empty;
          r_2' = r_2;
          r_3' = r_3
      []
      %% logout
      LOGOUT :
          cfstate = State_1 AND label = logout AND
              input_sequence ! size?(I) = 0
        -->                                                      %%90
          cfstate' = State_0;
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3;
          O' = output_sequence ! empty
      []
      %% write
      WRITE :
          cfstate = State_1 AND label = write AND
              input_sequence ! size?(I) = 1                        %%100
        -->
          cfstate' = State_1;
          r_1' = r_1;
          r_2' = Some(I(1));
          r_3' = r_1;
          O' = output_sequence ! empty
      []
      %% write
      WRITE_FAIL :
          cfstate = State_1 AND label = write AND                %%110
              input_sequence ! size?(I) = 1 AND NOT(gval(value_eq(r_3, r_1)))
        -->
          cfstate' = State_1;
          O' = output_sequence !
              insert(Some(STR(String_accessDenied)),
              output_sequence ! empty);
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3
      []                                                         %%120
      %% read
      READ_SUCCESS :
          cfstate = State_1 AND label = read AND
              input_sequence ! size?(I) = 0 AND
              gval(value_eq(r_1, r_3)) AND
              r_2 /= value_option ! None
        -->
          cfstate' = State_1;
          r_1' = r_1;
          r_2' = r_2;                                            %%130
          r_3' = r_3;
          O' = output_sequence ! insert(r_2, output_sequence !
              empty)
      []
      %% read
      READ_FAIL :
          cfstate = State_1 AND label = read AND
              input_sequence ! size?(I) = 0 AND
              NOT(gval((value_eq(r_1, r_3)))) OR r_2 = value_option ! None
        -->                                                      %%140
          cfstate' = State_1;
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3;
          O' = output_sequence !
              insert(Some(STR(String_accessDenied)),
              output_sequence ! empty)
      []
      SINK_HOLE :
          ELSE                                                   %%150
        -->
          cfstate' = NULL_STATE;
          r_1' = r_1;
          r_2' = r_2;
          r_3' = r_3
    ]
  END;
END
