horrible_example_2 {N_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  f,
  g,
  h
END;

STRING : TYPE = {String_dummy_};
                                                                 %%10
STATES : TYPE = {State_0, State_1, State_2, NULL_STATE};

value : CONTEXT = value {N_, STRING};
arithmetic : CONTEXT = arithmetic{N_, STRING};

TRILEAN : TYPE = arithmetic ! TRILEAN;
B_VALUE : TYPE =  value ! B_VALUE;
VALUE : TYPE =  value ! VALUE;
value_option : CONTEXT = option {VALUE};
                                                                 %%20
VALUE_OPTION : TYPE =  value_option ! OPTION;

Some : [VALUE -> VALUE_OPTION] = value_option ! Some;
NUM : [value ! int -> VALUE] = value ! NUM;
STR : [STRING -> VALUE] = value ! STR;

value_plus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    arithmetic ! value_plus;
value_minus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    arithmetic ! value_minus;                                      %%30
  
value_le : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_le;
value_ge : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_ge;
value_lt : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_lt;
value_gt : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =
    arithmetic ! value_gt;
value_eq : [[VALUE_OPTION, VALUE_OPTION] -> TRILEAN] =           %%40
    arithmetic ! value_eq;
  
output_sequence : CONTEXT = sequence {value_option !
    B_OPTION, value_option ! OPTION_BB, 1};
input_sequence : CONTEXT = sequence {B_VALUE, value !
    VALUE_BB, 1};
gval : [TRILEAN -> BOOLEAN] = LAMBDA(g : TRILEAN) : g =
    arithmetic ! True;
  
check_underflow : [VALUE_OPTION -> BOOLEAN] =                    %%50
    LAMBDA(v : VALUE_OPTION) : gval(value_ge(v, Some(NUM(0-N_))));
check_overflow : [VALUE_OPTION -> BOOLEAN] =
    LAMBDA(v : VALUE_OPTION) : gval(value_le(v, Some(NUM(N_))));
  
h2 : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATES
    LOCAL r_1 : VALUE_OPTION
    INPUT I : input_sequence ! Sequence                          %%60
    OUTPUT O : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State_0 AND
        I = input_sequence ! empty AND
        O = output_sequence ! empty AND
        r_1 = value_option ! None
      -->
    ]
    TRANSITION [
      %% f                                                       %%70
      T1 :
          cfstate = State_0 AND label = f AND
              input_sequence ! size?(I) = 1
        -->
          cfstate' = State_1;
          r_1' = Some(I(1));
          O' = output_sequence ! empty
      []
      %% g
      T2 :                                                       %%80
          cfstate = State_1 AND label = g AND
              input_sequence ! size?(I) = 0 AND
              gval(value_gt(r_1, Some(NUM(5)))) AND
              check_overflow(value_plus(r_1, Some(NUM(5)))) AND
              check_underflow(value_plus(r_1, Some(NUM(5))))
        -->
          cfstate' = State_1;
          r_1' = value_plus(r_1, Some(NUM(5)));
          O' = output_sequence ! empty
      []                                                         %%90
      %% h
      T3 :
          cfstate = State_1 AND label = h AND
              input_sequence ! size?(I) = 0
        -->
          cfstate' = State_2;
          O' = output_sequence ! empty;
          r_1' = r_1
      []
      SINK_HOLE :                                                %%100
          ELSE
        -->
          cfstate' = NULL_STATE;
          r_1' = r_1
    ]
  END;
END
