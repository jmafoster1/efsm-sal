horrible_example_2 {N_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  f,
  g,
  h
END;

STRING : TYPE = {String_dummy_};
                                                                 %%10
STATES : TYPE = {State_0, State_1, State_2, NULL_STATE};

Value:CONTEXT = value {N_, STRING};
Arithmetic:CONTEXT = arithmetic{N_, STRING};

B_VALUE : TYPE =  Value ! B_VALUE;
VALUE : TYPE =  {g : B_VALUE | g /= value {N_, STRING} !
    VALUE_BB};
ValueOption:CONTEXT = option {VALUE};
                                                                 %%20
B_VALUE_OPTION : TYPE = ValueOption ! B_OPTION;
VALUE_OPTION : TYPE =  {g : B_VALUE_OPTION | g /= ValueOption !
    OPTION_BB};
BOOL_OPTION : TYPE = option {bool} ! OPTION;

Some : [VALUE -> VALUE_OPTION] = ValueOption ! Some;
NUM: [Value!NAT -> VALUE] = Value ! NUM;
STR: [STRING -> VALUE] = Value ! STR;

value_plus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =    %%30
    Arithmetic ! value_plus;
value_minus : [[VALUE_OPTION, VALUE_OPTION] -> VALUE_OPTION] =
    Arithmetic ! value_minus;
  
value_le : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_le;
value_ge : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_ge;
value_lt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_lt;                                         %%40
value_gt : [[VALUE_OPTION, VALUE_OPTION] -> BOOL_OPTION] =
    Arithmetic ! value_gt;
  
OutputSequence : CONTEXT =
    sequence {B_VALUE_OPTION; ValueOption ! OPTION_BB, 1};
InputSequence : CONTEXT =
    sequence {B_VALUE; value {N_, STRING} ! VALUE_BB, 1};
  
gval : [BOOL_OPTION -> bool] =
LAMBDA(g:BOOL_OPTION): g = option {bool} !Some(TRUE);            %%50

h2 : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATES
    LOCAL r_1 : VALUE_OPTION
    INPUT I : InputSequence ! Sequence
    INITIALIZATION [
        cfstate = State_0 AND
        r_1 = ValueOption ! None                                 %%60
      -->
    ]
    TRANSITION [
      %% f
      T1 :
          cfstate = State_0 AND label = f AND
              InputSequence ! size?(I) = 1
        -->
          cfstate' = State_1;
          r_1' = Some(I(1))                                      %%70
      []
      %% g
      T2 :
          cfstate = State_1 AND label = g AND
              InputSequence ! size?(I) = 0 AND
              gval(value_gt(r_1, Some(NUM(5)))) AND
              gval(value_le(value_plus(r_1, Some(NUM(5))),
              Some(NUM(N_))))
        -->
          cfstate' = State_1;                                    %%80
          r_1' = value_plus(r_1, Some(NUM(5)))
      []
      %% h
      T3 :
          cfstate = State_1 AND label = h AND
              InputSequence ! size?(I) = 0
        -->
          cfstate' = State_2;
          r_1' = r_1
      []                                                         %%90
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE;
          r_1' = r_1
    ]
  END;
END
