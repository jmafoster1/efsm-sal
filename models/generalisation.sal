%The biggest absolute integer value used is 0
generalisation {n_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  coin,
  foo,
  select,
  vend
END;
                                                                 %%10
STRING : TYPE =
    {String__coke, String__dummy__, NO__1, NO__6, NO__50, NO__100};
  
STATE : TYPE =
    {State__0, State__1, State__2, State__3, State__4, NULL_STATE};
  
IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n_, STRING};                                %%20

output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};

vend : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    LOCAL r__2 : OPTION                                          %%30
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State__0 AND
        o = output_sequence ! empty AND
        r__1 = None AND
        r__2 = None
      -->
    ]
    TRANSITION [                                                 %%40
      SELECT :
          cfstate = State__0 AND label = select AND
              input_sequence ! size?(i) = 1 AND
              gval(value_eq(Some(i(0)), Some(Str(String__coke))))
        -->
          cfstate' = State__1;
          o' = output_sequence ! empty
      []
      COIN50__A :
          cfstate = State__1 AND label = coin AND                %%50
              input_sequence ! size?(i) = 1 AND
              gval(value_eq(Some(i(0)), Some(Str(NO__50))))
        -->
          cfstate' = State__2;
          o' = output_sequence ! empty
      []
      COIN50__B :
          cfstate = State__2 AND label = coin AND
              input_sequence ! size?(i) = 1 AND
              gval(value_eq(Some(i(0)), Some(Str(NO__50))))        %%60
        -->
          cfstate' = State__3;
          o' = output_sequence ! empty
      []
      VENDS :
          cfstate = State__3 AND label = vend AND
              input_sequence ! size?(i) = 0
        -->
          cfstate' = State__4;
          o' = output_sequence !                                 %%70
              insert(Some(Str(NO__1)), output_sequence ! empty)
      []
      VENDERR :
          cfstate = State__2 AND label = vend AND
              input_sequence ! size?(i) = 0
        -->
          cfstate' = State__2;
          o' = output_sequence ! empty
      []
      SINK_HOLE :                                                %%80
          ELSE
        -->
          cfstate' = NULL_STATE
    ]
  END;
vend_g : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION                                          %%90
    LOCAL r__2 : OPTION
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State__0 AND
        o = output_sequence ! empty AND
        r__1 = None AND
        r__2 = None
      -->
    ]                                                            %%100
    TRANSITION [
      SELECT :
          cfstate = State__0 AND label = select AND
              input_sequence ! size?(i) = 1 AND
              gval(value_eq(Some(i(0)), Some(Str(String__coke))))
        -->
          cfstate' = State__1;
          o' = output_sequence ! empty
      []
      COIN_INIT :                                                %%110
          cfstate = State__1 AND label = coin AND
              input_sequence ! size?(i) = 1
        -->
          cfstate' = State__2;
          r__1' = Some(i(0));
          o' = output_sequence ! empty
      []
      COIN_INC :
          cfstate = State__2 AND label = coin AND
              input_sequence ! size?(i) = 1 AND                    %%120
              check_overflow(value_plus(r__1, Some(i(0)))) AND
              check_underflow(value_plus(r__1, Some(i(0))))
        -->
          cfstate' = State__2;
          r__1' = value_plus(r__1, Some(i(0)));
          o' = output_sequence ! empty
      []
      VENDS_G :
          cfstate = State__2 AND label = vend AND
              input_sequence ! size?(i) = 0 AND                    %%130
              gval(value_ge(r__1, Some(Str(NO__100))))
        -->
          cfstate' = State__3;
          o' = output_sequence !
              insert(Some(Str(NO__1)), output_sequence ! empty)
      []
      VENDERR_G :
          cfstate = State__2 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_lt(r__1, Some(Str(NO__100))))             %%140
        -->
          cfstate' = State__2;
          o' = output_sequence !
              insert(Some(Str(NO__1)), output_sequence ! empty)
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE
    ]                                                            %%150
  END;
END
