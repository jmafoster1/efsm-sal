/*
 * Parser Rules
 */

grammar Counterexample;

i : 'i(' NUMBER ')';
r : 'r__' NUMBER;
o : 'o(' NUMBER ')';

cfstate : 'STATE__' NUMBER;

var : (i|o|r|PC|cfstate|LABEL);

salue : VAL '(' (NUMBER | STRING) ')';
option : NONE | ('Some(' salue ')');

value : (STRING|BOTTOM|NUMBER|cfstate|option|salue);

assignment : var ' = ' value '\n';
inputAssignments : '-- Input Variables (assignments) ---\n' (assignment*);
systemAssignments : '-- System Variables (assignments) ---\n' (assignment*);

transitionInfo : '------------------------\nTransition Information: \n(module instance at [Context: coin_tea_broken, line(92), column(17)]\n  (label SINK_HOLE\n    else transition at [Context: coin_tea_broken, line(66), column(10)]))\n------------------------\n';
step : 'Step 'NUMBER':\n' inputAssignments systemAssignments (transitionInfo | cycle | EOF);

cycle : CYCLE_HEAD path;

path : step+;

counterexample  : 'Counterexample:\n' PATH_HEAD path;

/*
 * Lexer Rules
 */

NUMBER     : '-'?[0-9]+;

/*WHITESPACE : ' ' -> skip ;*/
/*NEWLINE             : ('\r'? '\n' | '\r')+ -> skip;*/

PATH_HEAD : '========================\nPath\n========================\n';
CYCLE_HEAD : '========================\nBegin of Cycle\n========================\n';

LABEL : 'label';
PC : 'ba-pc!' [0-9]+;
STATE : 'cfstate';

VAL : ('Num' | 'Str');
NONE : 'None';

BOTTOM : ('ValueBB' | 'OptionBB');

MODULE_INSTANCE : 'module instance at [Context: ' STRING ', line(' NUMBER '), column(' NUMBER ')]';
TRANSITION : ('else ')?'transition at [Context: ' STRING ', line(' NUMBER '), column(' NUMBER ')]';

STRING : [a-zA-Z_]+;
