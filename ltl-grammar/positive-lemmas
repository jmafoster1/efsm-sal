lemma test: "alw (nxt (state_eq (Some 2)) impl (label_eq ''vend'')) (watch drinks t)"
lemma LTL_label_vend_not_2: "((label_eq ''vend'') impl (not (ev (state_eq (Some 2))))) (watch drinks t)"
lemma LTL_aux2: "((nxt (label_eq ''vend'')) impl not (ev (state_eq (Some 2)))) (watch drinks t)"
lemma LTL_init_makes_r_1_zero: "((label_eq ''init'' aand input_eq []) impl (nxt (check_exp (Eq (V (Rg 1)) (L (Num 0)))))) (watch drinks t)"
lemma LTL_must_pay_wrong: "((not (label_eq ''vend'' suntil label_eq ''coin'')) suntil state_eq None) (watch drinks t)"
lemma LTL_vend_no_coin: "((nxt (label_eq ''vend'' aand input_eq [])) impl not (ev (state_eq (Some 2)))) (watch drinks t)"
lemma LTL_invalid_gets_stuck_2: "(((nxt (not (label_eq ''coin'' aand input_eq []))) aand (nxt (not (label_eq ''vend'' aand input_eq [])))) impl (not (ev (state_eq (Some 2))))) (watch drinks t)"
lemma LTL_must_pay_correct: "((ev (state_eq (Some 2))) impl (not (label_eq ''vend'') suntil label_eq ''coin'')) (watch drinks t)"
lemma LTL_must_pay_correct_bracketed: "((ev (state_eq (Some 2))) impl ((not (label_eq ''vend'')) suntil label_eq ''coin'')) (watch drinks t)"

lemma LTL_neverDetailed: "(((label_eq ''login'' aand input_eq [Str ''free'']) impl (nxt (alw ((label_eq ''pdf'' aand check_exp (Eq (V (Ip 0)) (L (Str ''otherID'')))) impl (not (nxt (output_eq [Some (Str ''detailed_pdf_of_otherID'')])))))))) (watch linkedIn i)"

lemma must_stop_to_open_false: "alw ((not (label_eq ''opendoor'' aand nxt (output_eq [Some (Str ''true''),Some (Num n)]))) until (label_eq ''motorstop'')) (watch lift i)"
lemma alw_must_stop_to_open: "alw ((ev (nxt ((label_eq ''opendoor'') aand (nxt (output_eq [Some (Str ''true''), Some n]))))) impl ((not (nxt ((label_eq ''opendoor'') aand (nxt (output_eq [Some (Str ''true''), Some n]))))) until (((label_eq ''motorstop'') or (nxt (output_eq [Some (Str ''true''), Some n])))))) (watch lift i)"
lemma LTL_must_stop_lift_to_open_door: "alw ((ev (nxt ((label_eq ''opendoor'') aand (nxt (output_eq [Some (Str ''true''), Some n]))))) impl ((not (nxt ((label_eq ''opendoor'') aand (nxt (output_eq [Some (Str ''true''), Some n]))))) suntil (((label_eq ''motorstop'') or (nxt (output_eq [Some (Str ''true''), Some n])))))) (watch lift t)"
