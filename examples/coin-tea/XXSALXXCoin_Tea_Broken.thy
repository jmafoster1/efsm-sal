(* Generated by the SAL to Isabelle Translator *)
(* Version 1.9 released 6 December 2021 *)

theory XXSALXXCoin_Tea_Broken
imports "Extended_Finite_State_Machines.EFSM_LTL"
begin

declare One_nat_def [simp del]
declare ltl_step_alt [simp]

definition init :: "transition" where
"init \<equiv> \<lparr>
    Label = (STR ''init''),
    Arity = 0,
    Guards = [],
    Outputs = [],
    Updates = [
      (1, (L (Num 0)))
    ]
\<rparr>"

definition coin :: "transition" where
"coin \<equiv> \<lparr>
    Label = (STR ''coin''),
    Arity = 0,
    Guards = [],
    Outputs = [],
    Updates = [
      (1, (Plus (V (R 1)) (L (Num 1))))
    ]
\<rparr>"

definition vend :: "transition" where
"vend \<equiv> \<lparr>
    Label = (STR ''vend''),
    Arity = 0,
    Guards = [
      (Ge (V (R 1)) (L (Num 0)))
    ],
    Outputs = [
      (L (Str ''tea''))
    ],
    Updates = []
\<rparr>"


definition drinks :: "transition_matrix" where
"drinks \<equiv> {|
    ((0, 1), init),
    ((1, 1), coin),
    ((1, 2), vend)
  |}"
  
  
lemmas transitions =
  init_def
  coin_def
  vend_def
  
  
lemma LTL_label_vend_not_2 :
  "(label_eq ''vend'' impl not (ev (state_eq (Some 2))))
(watch drinks trace)"
oops

lemma LTL_init_makes_r_1_zero :
  "((label_eq ''init'' aand
      input_eq []) impl
      nxt (check_exp ((Eq (V (Rg 1)) (L (Num 0))))))
(watch drinks trace)"
oops

lemma LTL_vend_no_coin :
  "(nxt (label_eq ''vend'' aand
      input_eq []) impl not (ev (state_eq (Some 2))))
(watch drinks trace)"
oops

lemma LTL_invalid_gets_stuck_2 :
  "((nxt (not (label_eq ''coin'' aand input_eq [])) aand
      nxt (not (label_eq ''vend'' aand
      input_eq []))) impl not (ev (state_eq (Some 2))))
(watch drinks trace)"
oops

lemma LTL_must_pay_correct :
  "(ev (state_eq (Some 2)) impl
      (not (label_eq ''vend'') suntil label_eq ''coin''))
(watch drinks trace)"
oops

lemma LTL_must_pay_correct_bracketed :
  "(ev (state_eq (Some 2)) impl
      (not (label_eq ''vend'') suntil label_eq ''coin''))
(watch drinks trace)"
oops

end
