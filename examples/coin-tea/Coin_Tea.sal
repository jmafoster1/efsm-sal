% Generated by the Isabelle to SAL translator
% Version 1.9 released 6 December 2021
% The biggest absolute integer value used is 1
Coin_Tea {n1_ : nznat, n2_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  coin,
  init,
  vend
END;                                                             %%10

STRING : TYPE = {String__tea, String__dummy__};

STATE : TYPE = {State__0, State__1, State__2, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n1_, n2_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n1_, n2_, STRING};
                                                                 %%20
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};
output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};

drinks : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence                        %%30
    INITIALIZATION [
        cfstate = State__0 AND
        o = output_sequence ! empty AND
        r__1 = None
      -->
    ]
    TRANSITION [
      INIT :
          cfstate = State__0 AND label = init AND
              input_sequence ! size?(i) = 0                        %%40
        -->
          cfstate' = State__1;
          r__1' = Some(Num(0));
          o' = output_sequence ! empty
      []
      COIN :
          cfstate = State__1 AND label = coin AND
              input_sequence ! size?(i) = 0 AND
              check_overflow(value_plus(r__1, Some(Num(1)))) AND
              check_underflow(value_plus(r__1, Some(Num(1))))      %%50
        -->
          cfstate' = State__1;
          r__1' = value_plus(r__1, Some(Num(1)));
          o' = output_sequence ! empty
      []
      VEND :
          cfstate = State__1 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_gt(r__1, Some(Num(0))))
        -->                                                      %%60
          cfstate' = State__2;
          o' = output_sequence !
              insert(Some(Str(String__tea)), output_sequence !
              empty)
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE;
          o' = output_sequence ! empty                           %%70
    ]
  END;
  LTL_label_vend_not_2 : THEOREM drinks |-
    label = vend => NOT (F(cfstate = State__2));
    
  LTL_aux2 : THEOREM drinks |-
    X(label = vend) => NOT (F(cfstate = State__2));
    
  LTL_init_makes_r_1_zero : THEOREM drinks |-
    (label = init AND                                            %%80
        i = input_sequence ! empty) =>
        X(check_exp(value_eq(r__1, Some(Num(0)))));
      
  LTL_must_pay_wrong : THEOREM drinks |-
    U(NOT (U(label = vend, label = coin)), cfstate = NULL_STATE);
    
  LTL_vend_no_coin : THEOREM drinks |-
    X(label = vend AND
        i = input_sequence ! empty) => NOT (F(cfstate = State__2));
                                                                 %%90
  LTL_invalid_gets_stuck_2 : THEOREM drinks |-
    (X(NOT (label = coin AND i = input_sequence ! empty)) AND
        X(NOT (label = vend AND
        i = input_sequence ! empty))) =>
        NOT (F(cfstate = State__2));
      
  LTL_must_pay_correct : THEOREM drinks |-
    F(cfstate = State__2) =>
        (U(NOT (label = vend), label = coin));
                                                                 %%100
  LTL_must_pay_correct_bracketed : THEOREM drinks |-
    F(cfstate = State__2) =>
        (U(NOT (label = vend), label = coin));
      
END
