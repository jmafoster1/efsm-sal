% Generated by the Isabelle to SAL translator
% Version 1.2 released 21 June 2021
% The biggest absolute integer value used is 100
drinks_machine_ltl {n_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  coin,
  select,
  vend
END;                                                             %%10

STRING : TYPE = {String__coke, String__dummy__};

STATE : TYPE = {State__0, State__1, State__2, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n_, STRING};
                                                                 %%20
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};
output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};

drinks : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    LOCAL r__2 : OPTION
    INPUT i : input_sequence ! Sequence                          %%30
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State__0 AND
        o = output_sequence ! empty AND
        r__1 = None AND
        r__2 = None
      -->
    ]
    TRANSITION [
      SELECT :                                                   %%40
          cfstate = State__0 AND label = select AND
              input_sequence ! size?(i) = 1
        -->
          cfstate' = State__1;
          r__1' = Some(i(0));
          r__2' = Some(Num(0));
          o' = output_sequence ! empty
      []
      COIN :
          cfstate = State__1 AND label = coin AND                %%50
              input_sequence ! size?(i) = 1 AND
              check_overflow(value_plus(r__2, Some(i(0)))) AND
              check_underflow(value_plus(r__2, Some(i(0))))
        -->
          cfstate' = State__1;
          r__1' = r__1;
          r__2' = value_plus(r__2, Some(i(0)));
          o' = output_sequence !
              insert(value_plus(r__2, Some(i(0))),
              output_sequence ! empty)                             %%60
      []
      VEND :
          cfstate = State__1 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_ge(r__2, Some(Num(100))))
        -->
          cfstate' = State__2;
          r__1' = r__1;
          r__2' = r__2;
          o' = output_sequence ! insert(r__1, output_sequence !  %%70
              empty)
      []
      VEND_FAIL :
          cfstate = State__1 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_lt(r__2, Some(Num(100))))
        -->
          cfstate' = State__1;
          r__1' = r__1;
          r__2' = r__2;                                          %%80
          o' = output_sequence ! empty
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE;
          o' = output_sequence ! empty
    ]
  END;
  LTL_r2_not_always_gt_100 : THEOREM drinks |-                   %%90
    NOT (G(check_exp(value_gt(r__2, Some(Num(100))))));
    
  LTL_nxt_2_means_vend : THEOREM drinks |-
    G(X(cfstate = State__2) => cfstate = State__1);
    
  LTL_costsMoney : THEOREM drinks |-
    G(X(cfstate = State__2) =>
        check_exp(value_ge(r__2, Some(Num(100)))));
      
  LTL_costsMoney_aux : THEOREM drinks |-                         %%100
    G(NOT (check_exp(value_ge(r__2, Some(Num(100))))) =>
        NOT (X(cfstate = State__2)));
      
  LTL_neverReachS2 : THEOREM drinks |-
    (((label = select AND
        i = input_sequence !
        insert(Str(String__coke), input_sequence ! empty)) AND
        X(label = coin AND
        i = input_sequence ! insert(Num(100), input_sequence !
        empty))) AND X(X(label = vend AND                          %%110
        i = input_sequence ! empty))) =>
        X(X(X(cfstate = State__2)));
      
  LTL_drinks_cost_money : THEOREM drinks |- FORALL(drink :
      STRING) :
    G(X(o = output_sequence !
        insert(Some(Str(drink)), output_sequence ! empty)) =>
        check_exp(value_ge(r__2, Some(Num(100)))));
      
  LTL_output_vend : THEOREM drinks |- FORALL(d : VALUE) :        %%120
    G((label = vend AND
        X(o = output_sequence ! insert(Some(d), output_sequence !
        empty))) => check_exp(value_ge(r__2, Some(Num(100)))));
      
END
