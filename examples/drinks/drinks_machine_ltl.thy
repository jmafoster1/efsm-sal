(* Generated by the SAL to Isabelle Translator *)
(* Version 1.5 released 25 June 2021 *)

theory drinks_machine_ltl
imports "EFSM.EFSM_LTL"
begin

declare One_nat_def [simp del]
declare ltl_step_alt [simp]

definition select :: "transition" where
"select \<equiv> \<lparr>
    Label = (STR ''select''),
    Arity = 1,
    Guards = [],
    Outputs = [],
    Updates = [
      (1, (V (I 0))),
      (2, (L (Num 0)))
    ]
\<rparr>"

definition coin :: "transition" where
"coin \<equiv> \<lparr>
    Label = (STR ''coin''),
    Arity = 1,
    Guards = [],
    Outputs = [
      (Plus (V (R 2)) (V (I 0)))
    ],
    Updates = [
      (1, (V (R 1))),
      (2, (Plus (V (R 2)) (V (I 0))))
    ]
\<rparr>"

definition vend :: "transition" where
"vend \<equiv> \<lparr>
    Label = (STR ''vend''),
    Arity = 0,
    Guards = [
      (Ge (V (R 2)) (L (Num 100)))
    ],
    Outputs = [
      (V (R 1))
    ],
    Updates = [
      (1, (V (R 1))),
      (2, (V (R 2)))
    ]
\<rparr>"

definition vend_fail :: "transition" where
"vend_fail \<equiv> \<lparr>
    Label = (STR ''vend''),
    Arity = 0,
    Guards = [
      (Lt (V (R 2)) (L (Num 100)))
    ],
    Outputs = [],
    Updates = [
      (1, (V (R 1))),
      (2, (V (R 2)))
    ]
\<rparr>"


definition drinks :: "transition_matrix" where
"drinks \<equiv> {|
    ((0, 1), select),
    ((1, 1), coin),
    ((1, 2), vend),
    ((1, 1), vend_fail)
  |}"
  
  
lemmas transitions =
  select_def
  coin_def
  vend_def
  vend_fail_def
  
  
lemma LTL_r2_not_always_gt_100 :
  "(not (alw (check_exp ((Gt (V (Rg 2)) (L (Num 100)))))))
(watch drinks trace)"
oops

lemma LTL_nxt_2_means_vend :
  "(alw (nxt (state_eq (Some 2)) impl state_eq (Some 1)))
(watch drinks trace)"
oops

lemma LTL_costsMoney :
  "(alw (nxt (state_eq (Some 2)) impl
      check_exp ((Ge (V (Rg 2)) (L (Num 100))))))
(watch drinks trace)"
oops

lemma LTL_costsMoney_aux :
  "(alw (not (check_exp ((Ge (V (Rg 2)) (L (Num 100))))) impl
      not (nxt (state_eq (Some 2)))))
(watch drinks trace)"
oops

lemma LTL_neverReachS2 :
  "((((label_eq ''select'' aand input_eq [Str ''coke'']) aand
      nxt (label_eq ''coin'' aand input_eq [Num 100])) aand
      nxt (nxt (label_eq ''vend'' aand
      input_eq []))) impl nxt (nxt (nxt (state_eq (Some 2)))))
(watch drinks trace)"
oops

lemma LTL_drinks_cost_money :
  "(alw (nxt (output_eq [Some (Str drink)]) impl
      check_exp ((Ge (V (Rg 2)) (L (Num 100))))))
(watch drinks trace)"
oops

lemma LTL_output_vend :
  "(alw ((label_eq ''vend'' aand
      nxt (output_eq [Some d])) impl
      check_exp ((Ge (V (Rg 2)) (L (Num 100))))))
(watch drinks trace)"
oops

end
