% Generated by the Isabelle to SAL translator
% Version 1.6 released 23 July 2021
% The biggest absolute integer value used is 100
XXTHYXXdrinks_machine {n1_ : nznat, n2_ : nznat} : CONTEXT =
    BEGIN
  
LABEL : TYPE = DATATYPE
  coin,
  select,
  vend                                                           %%10
END;

STRING : TYPE = {String__dummy__};

STATE : TYPE = {State__0, State__1, State__2, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n1_, n2_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n1_, n2_, STRING};                          %%20

input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};
output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};

drinks : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    LOCAL r__2 : OPTION                                          %%30
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State__0 AND
        o = output_sequence ! empty AND
        r__1 = None AND
        r__2 = None
      -->
    ]
    TRANSITION [                                                 %%40
      SELECT :
          cfstate = State__0 AND label = select AND
              input_sequence ! size?(i) = 1
        -->
          cfstate' = State__1;
          r__1' = Some(i(0));
          r__2' = Some(Num(0));
          o' = output_sequence ! empty
      []
      COIN :                                                     %%50
          cfstate = State__1 AND label = coin AND
              input_sequence ! size?(i) = 1 AND
              check_overflow(value_plus(r__2, Some(i(0)))) AND
              check_underflow(value_plus(r__2, Some(i(0))))
        -->
          cfstate' = State__1;
          r__1' = r__1;
          r__2' = value_plus(r__2, Some(i(0)));
          o' = output_sequence !
              insert(value_plus(r__2, Some(i(0))),                 %%60
              output_sequence ! empty)
      []
      VEND :
          cfstate = State__1 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_ge(r__2, Some(Num(100))))
        -->
          cfstate' = State__2;
          r__1' = r__1;
          r__2' = r__2;                                          %%70
          o' = output_sequence ! insert(r__1, output_sequence !
              empty)
      []
      VEND_FAIL :
          cfstate = State__1 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_lt(r__2, Some(Num(100))))
        -->
          cfstate' = State__1;
          r__1' = r__1;                                          %%80
          r__2' = r__2;
          o' = output_sequence ! empty
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE;
          o' = output_sequence ! empty
    ]
  END;                                                           %%90
END
