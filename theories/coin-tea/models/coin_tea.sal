%The biggest absolute integer value used is 0
coin_tea {n_ : nznat} : CONTEXT = BEGIN

LABEL : TYPE = DATATYPE
  coin,
  init,
  vend
END;

STRING : TYPE = {String__tea, String__dummy__, NO__1};           %%10

STATE : TYPE = {State__0, State__1, State__2, NULL_STATE};

IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};
IMPORTING arithmetic{n_, STRING};

output_sequence : CONTEXT = sequence {B_OPTION, OptionBB, 1};
input_sequence : CONTEXT = sequence {B_VALUE, ValueBB, 1};       %%20

drinks : MODULE =
  BEGIN
    INPUT label : LABEL
    LOCAL cfstate : STATE
    LOCAL r__1 : OPTION
    INPUT i : input_sequence ! Sequence
    OUTPUT o : output_sequence ! Sequence
    INITIALIZATION [
        cfstate = State__0 AND                                   %%30
        o = output_sequence ! empty AND
        r__1 = None
      -->
    ]
    TRANSITION [
      INIT :
          cfstate = State__0 AND label = init AND
              input_sequence ! size?(i) = 0
        -->
          cfstate' = State__1;                                   %%40
          r__1' = Some(Num(0));
          o' = output_sequence ! empty
      []
      COIN :
          cfstate = State__1 AND label = coin AND
              input_sequence ! size?(i) = 0 AND
              check_overflow(value_plus(r__1,
              Some(Str(NO__1)))) AND
              check_underflow(value_plus(r__1, Some(Str(NO__1))))
        -->                                                      %%50
          cfstate' = State__1;
          r__1' = value_plus(r__1, Some(Str(NO__1)));
          o' = output_sequence ! empty
      []
      VEND :
          cfstate = State__1 AND label = vend AND
              input_sequence ! size?(i) = 0 AND
              gval(value_gt(r__1, Some(Num(0))))
        -->
          cfstate' = State__2;                                   %%60
          o' = output_sequence !
              insert(Some(Str(String__tea)), output_sequence !
              empty)
      []
      SINK_HOLE :
          ELSE
        -->
          cfstate' = NULL_STATE
    ]
  END;                                                           %%70
  LTL_label_vend_not_2 : THEOREM drinks |-
    label = vend => NOT (F(cfstate = State__2));

  LTL_aux2 : THEOREM drinks |-
    X(label = vend) => NOT (F(cfstate = State__2));

  LTL_init_makes_r_1_zero : THEOREM drinks |-
    label = init AND
        i = input_sequence ! empty => X((r__1 = Some(Num(0))));
                                                                 %%80
  LTL_must_pay_wrong : THEOREM drinks |-
    U(NOT (U(label = vend, label = coin)), cfstate = NULL_STATE);

  LTL_vend_no_coin : THEOREM drinks |-
    X(label = vend AND
        i = input_sequence ! empty) => NOT (F(cfstate = State__2));

  LTL_invalid_gets_stuck_2 : THEOREM drinks |-
    X(NOT (label = coin AND i = input_sequence ! empty)) AND
        X(NOT (label = vend AND                                    %%90
        i = input_sequence ! empty)) =>
        NOT (F(cfstate = State__2));

  LTL_must_pay_correct_bracketed : THEOREM drinks |-
    F(cfstate = State__2) => U(NOT (label = vend), label = coin);

  LTL_must_pay_correct : THEOREM drinks |-
    F(cfstate = State__2) => U(NOT (label = vend), label = coin);

END                                                              %%100
