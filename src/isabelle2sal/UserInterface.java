package isabelle2sal;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Siobhan
 */
public class UserInterface extends javax.swing.JFrame {
    
    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
        setLocationRelativeTo(null);
        chooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Isabelle files", "thy"));
        chooser.setCurrentDirectory(Paths.get(System.getProperty("user.home")).toFile());
        version.setText(Translator.VERSION);
    }
    
    private void displayErrorMessage (String message, Exception e) {
        displayProgress(message);
        javax.swing.JOptionPane.showMessageDialog(this, 
                e.toString().substring(e.toString().indexOf(':')+1));
    }

    private void displayProgress(String message)  {
       progressLabel.setText(message);
    }

    private void filePicked(Path filePath)   {
        displayProgress("Working on " + fileName(filePath));        
        try {            
            displayProgress(translateIt(filePath));           
        } catch ( IsabelleException e) {
            displayErrorMessage(e.failureFor(fileName(filePath)),e);        
        } catch (FileException e) {
            displayErrorMessage(e.failureFor(fileName(filePath)),e);
        }   
        
    }
    
    private static String fileName(Path filePath) {
        String fileName = filePath.getFileName().toString();
        return fileName.substring(0,fileName.indexOf('.'));  
    }
    
    private static String translateIt(Path filePath) throws IsabelleException,   FileException  {
        new Translator().readIsabelleWriteSALandDOT(filePath);
        return "The Isabelle file " + fileName(filePath) + 
                " has been successfully translated into " + 
                fileName(filePath) + ".sal and " +
                fileName(filePath) + ".dot";
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        finished = new javax.swing.JButton();
        chooser = new javax.swing.JFileChooser();
        heading = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();
        version = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        finished.setText("Finished");
        finished.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedActionPerformed(evt);
            }
        });

        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setApproveButtonText("Translate");
        chooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Isabelle files", "thy"));
        chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooserActionPerformed(evt);
            }
        });

        heading.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        heading.setForeground(new java.awt.Color(0, 0, 150));
        heading.setText("Pick an Isabelle file to translate to SAL");

        progressLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        version.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        version.setForeground(new java.awt.Color(0, 0, 150));
        version.setText("This will be replaced by the version number");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(229, 229, 229)
                        .addComponent(finished, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(version, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(finished, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(version, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void finishedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedActionPerformed
        System.exit(0);     
    }//GEN-LAST:event_finishedActionPerformed

    private void chooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooserActionPerformed
        if  (  evt.getActionCommand().equals("CancelSelection") || chooser.getSelectedFile() == null  )  
            return;
        Path chosen = chooser.getSelectedFile().toPath();
        chooser.setSelectedFile(null);
        filePicked(chosen);
    }//GEN-LAST:event_chooserActionPerformed
    
    private static void runFromTheCommandLine(String args[]) {
        Path filePath = Paths.get(System.getProperty("user.home"),args[0]);
        for (int i=1; i<args.length; i++)
            filePath = filePath.resolve(args[i]);
        if  (  Files.exists(filePath)  )
            try {System.out.println(translateIt(filePath));
            } catch (IsabelleException ex) {
                System.out.println(ex.failureFor(fileName(filePath)));
            } catch (FileException ex) {
                System.out.println(ex.failureFor(fileName(filePath)));
            }        
        else 
            System.out.println(filePath+" does not exist");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        if  (  args.length > 0  )
            runFromTheCommandLine(args);
        else {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new UserInterface().setVisible(true);
                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser chooser;
    private javax.swing.JButton finished;
    private javax.swing.JLabel heading;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JLabel version;
    // End of variables declaration//GEN-END:variables
}
