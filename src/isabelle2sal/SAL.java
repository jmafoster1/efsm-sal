package isabelle2sal;

import static isabelle2sal.Generator.*;
import java.nio.file.Files;

import java.nio.file.Path;
import java.util.*;


/**
 * Deals with things only needed in sal
 * @author sdn
 */
public class SAL {    
    
    //::::::::::::::::::::::::::: Utilities       
    
    static class ReservedWords {
        
        private static final Set<String> FORBIDDEN_WORDS = allSALReservedWords();    
        private static Set<String> allSALReservedWords() {
            final String [] ARRAY =
                {   //Reserved words in sal
                    "ARRAY",    "BEGIN",    "BOOLEAN",
                    "CLAIM",    "CONTEXT",  "DATATYPE", "DEFINITION",   
                    "DIV",      "ELSE",     "ELSIF",    "END",  
                    "ENDIF",    "EXISTS",   "FORALL",
                    "GLOBAL",   "IF",       "IMPORTING","INITIALIZATION",
                    "INPUT",    "INTEGER",  "LAMBDA",   "LEMMA",    
                    "LET",      "LOCAL",    "MOD",      "MODULE",
                    "NATURAL",  "NOT",      "NZNAT",    "OBLIGATION",
                    "OF",       "OR",       "OUTPUT",   "REAL",     
                    "RENAME",   "THEN",     "THEOREM",  "TO",   
                    "TRANSITION",           "TYPE",     "WITH",     
                    "XOR",
                    
                    //Words used by the translation
                    "arithmetic",           "B_OPTION", "B_VALUE",                    
                    "cfstate",  "check_inx","i",        "input_eq", 
                    "input_sequence",       "LABEL",    "label_eq",   
                    "n_",       "NAT",      "NULL_STATE",           
                    "o",        "option",   "OptionBB", "output_eq",
                    "output_sequence",
                    "sequence", "SINK_HOLE","state_eq", "STRING", 
                    "STATE",    "trilean",  "value",    "VALUE",    
                    "value_eq", "value_ge", "value_gt", "value_le",
                    "value_lt", "ValueBB"

                };
            Set<String> result = new HashSet<>();
            result.addAll(Arrays.asList(ARRAY));
            return result;
        }

        public static boolean contains(String s)  {
            return FORBIDDEN_WORDS.contains(s.toUpperCase()) ||
                    FORBIDDEN_WORDS.contains(s.toLowerCase());
        }   

    }   
    
    //::::::::::::::::::::::::::: The Internal Representation
    
    long maxAbsoluteValue;
    
    //::::::::::::::::::::::::::: Translating from isablle to sal

    void createConstants() {
        maxAbsoluteValue = NumericConstant.findMaximumAndMakeRestStrings();
    }   
    
    Assignment stateTest(int s)  {
        return Assignment.newOne(
                    SystemVariable.STATE, 
                    SystemConstant.stateConstantFor(s));   
    }
    
    Assignment stateTest()  {
        return Assignment.newOne(
                SystemVariable.STATE, 
                SystemConstant.NULL_STATE);   
    }
                 
    //::::::::::::::::::::::::::: Output as SAL
    
    final static String SYSTEM_MARKER = "__";
    final static String SUFFIX = ".sal";
    
    private String outputNameFrom(Path directory, String name) {
                
        final String GENERATED_MARKER = "XXTHYXX";
        
        if  (  ReservedWords.contains(name)   )
            name = name+SYSTEM_MARKER;  
        
        while  (  Files.exists(directory.resolve(name+SUFFIX))  )
            name = GENERATED_MARKER+name;

        return name;  
        
    }
    
    private void outputContext() throws IsabelleException, FileException {

        outputSALLine("IMPORTING trilean;");
        outputSALLine("IMPORTING value{n1_, n2_, STRING};");
        outputSALLine("IMPORTING option{VALUE};");
        outputSALLine("IMPORTING arithmetic{n1_, n2_, STRING};");
        
        outputBlankLineInSAL();
  
        IOVariable.declareSequenceTypesInSAL();
        
        outputBlankLineInSAL();
        
    }

    void output(Path directory, String fileName) throws FileException, IsabelleException { 
        
        String outputFileName = outputNameFrom(directory, fileName);
                       
        startSALOutput(directory.resolve(outputFileName+SUFFIX));

        outputSALLine("% Generated by the Isabelle to SAL translator");
        outputSALLine("% " + Translator.VERSION);
        outputSALLine("% The biggest absolute integer value used is "+maxAbsoluteValue);

        outputSALLine(
                outputFileName, 
                Token.OPENING_CURLY_BRACKET,    
                "n1_", 
                Token.COLON, 
                "nznat",
                Token.COMMA,
                "n2_", 
                Token.COLON, 
                "nznat",
                Token.CLOSING_CURLY_BRACKET,
                Token.COLON, 
                Token.CONTEXT, 
                Token.EQUALS, 
                Token.BEGIN);
        
        outputBlankLineInSAL();
        
        Type.LABEL.outputDefinitionInSALIncluding(SystemConstant.allLabels());
        Type.STRING.outputDefinitionInSALIncluding(SystemConstant.allStringConstants());
        Type.STATE.outputDefinitionInSALIncluding(SystemConstant.allStateConstants());
        
        outputContext();
       
        for (EFSM e : EFSM.theEFSMs())
            e.outputModule();

        for (Lemma t : Lemma.theTheorems())
            t.outputInSAL();
        
        outputSALLine(Token.END);

        finishSALOutputSuccessfully(true);

    }
    
 }
